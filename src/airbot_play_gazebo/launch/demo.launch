<?xml version="1.0"?>
<launch>
  <!-- Gazebo options -->
  <arg name="namespace" default="airbot_play" />
  <arg name="world_name" default="airbot_play_gazebo_worlds/desk_sky_box_3cubes_static.world" doc="Gazebo world file"/>
  <arg name="world_pose" default="-x 0.39 -y 0.8435 -z 0.302493 -R 0 -P 0 -Y -1.57079" doc="Pose to spawn the robot at"/>
  <arg name="model_pkg" default="airbot_play_gripper_with_simple_usb_camera_gazebo" doc="The name of the package containing URDF or Xacro file of robot model"/>
  <arg name="model_name" default="$(arg model_pkg)" doc="The URDF or Xacro file name of robot model"/>
  <arg name="use_xacro" default="false" doc="Don't use URDF"/>
  <arg name="start_moveit" default="false" doc="Use MoveIt! to control the gazebo robot"/>
  <arg name="moveit_config" default="airbot_play_v3_gripper_gazebo_all_config" doc="MoveIt! config package name"/>
  <arg name="initial_joint_positions" default=" -J joint1 0 -J joint2 0 -J joint3 0 -J joint4 0 -J joint5 0 -J joint6 0 -J joint_gripper10 0 -J joint_gripper11 0 -J joint_gripper20 0 -J joint_gripper21 0" doc="Initial joint configuration of the robot"/>
  <arg name="gazebo_gui" default="true" doc="Start Gazebo GUI"/>
  <arg name="paused" default="false" doc="Start Gazebo paused"/>
  <arg name="player_number" default="1" doc="The number of all airbot players(after)"/>
  <arg name="with_rm2" default="false" doc="AIRbotPlay with rm2"/>
  <arg name="ik_server" default="false" doc="Start ik server"/>
  <arg name="gripper_node" default="false" doc="Start gripper control node "/>
  <arg name="add_models" default="false" doc="Add other models to the world "/>
  <arg name="image_view" default="false" doc="View image from default topic "/>

  <!-- Start Gazebo paused to allow the controllers to pickup the initial pose -->
  <include file="$(find airbot_play_gazebo)/launch/empty_world.launch" pass_all_args="true">
    <arg name="paused" value="true"/>
  </include>

  <!-- Set the robot urdf on the parameter server -->
  <arg name="cmd_to_find_model_path" value="['rospack','find','$(arg model_pkg)']"/>
  <arg name="model_pkg_path" value="$(eval eval('_'+'_import_'+'_(&quot;subprocess&quot;)').check_output(eval(arg('cmd_to_find_model_path'))).decode().strip())"/>
  <param unless="$(arg use_xacro)" name="robot_description" textfile="$(arg model_pkg_path)/urdf/$(arg model_name).urdf" />
  <param if="$(arg use_xacro)" name="robot_description" command="$(find xacro)/xacro --inorder '$(arg model_pkg_path)/urdf/$(arg model_name).xacro'" />
  <group ns="$(arg namespace)">
    <param unless="$(arg use_xacro)" name="robot_description" textfile="$(arg model_pkg_path)/urdf/$(arg model_name).urdf" />
    <param if="$(arg use_xacro)" name="robot_description" command="$(find xacro)/xacro --inorder '$(arg model_pkg_path)/urdf/$(arg model_name).xacro'" />
  </group>

  <!-- Unpause the simulation after loading the robot model -->
  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />

  <!-- Spawn the robot to Gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot $(arg unpause) $(arg world_pose) $(arg initial_joint_positions)"
    respawn="false" output="screen" />

  <!-- Add other models to Gazebo -->
  <include if="$(arg add_models)" file="$(find airbot_play_gazebo)/launch/add_models.launch" />
  <!-- Spawn the ROS controllers -->
  <include file="$(find airbot_play_gazebo)/launch/ros_controllers.launch">
    <!-- Use MoveIt! to control the gazebo robot -->
    <arg name="use_moveit" value="$(arg start_moveit)" />
    <!-- Use RM2 -->
    <arg name="with_rm2" value="$(arg with_rm2)" />
  </include>

  <!-- Remap the joint cmd -->
  <group ns="$(arg namespace)">
    <node name="airbot_play_gazebo_remap_joint_cmd" pkg="airbot_play_gazebo" type="remap_joint_cmd.py">
    </node>
  </group>

  <!-- Start MoveIt! -->
  <group if="$(arg start_moveit)" ns="$(arg namespace)">
    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
    <arg name="cmd_to_find_pkg_path" value="['rospack','find','$(arg moveit_config)']"/>
    <arg name="pkg_path" value="$(eval eval('_'+'_import_'+'_(&quot;subprocess&quot;)').check_output(eval(arg('cmd_to_find_pkg_path'))).decode().strip())"/>
    <include file="$(arg pkg_path)/launch/demo.launch">
      <!-- robot_description is loaded by gazebo.launch, to enable Gazebo features -->
      <arg name="load_robot_description" value="false" />
      <arg name="moveit_controller_manager" value="ros_control" />
      <arg name="pipeline" value="ompl"/>
    </include>
    <!-- 规划与执行的关键参数 -->
    <param name="move_group/trajectory_execution/allowed_execution_duration_scaling" value="3.0"/>
    <param name="move_group/trajectory_execution/allowed_goal_duration_margin" value="0.5"/>
    <param name="move_group/trajectory_execution/execution_duration_monitoring" value="false"/>
    <param name="move_group/trajectory_execution/allowed_start_tolerance" value="3.0"/>
  </group>

  <param name="/airbot_play/sim_player_nums" type="int" value="$(arg player_number)" />

  <!-- ik server -->
  <node if="$(arg ik_server)" name="airbot_play_gazebo_ik_server" pkg="airbot_play_follow_basic" type="ik_control_server.py" args="-rd 'robot_description' -ns ''" output="screen" />
  <!-- gripper control node -->
  <node if="$(arg gripper_node)" name="airbot_play_gazebo_gripper_control" pkg="airbot_play_follow_basic" type="gripper_control.py" args="-rd 'robot_description' -ns ''" output="screen" />
  <!-- image view TODO:auto detect image topic  -->
  <node if="$(arg image_view)" name="airbot_play_gazebo_image_view" pkg="image_view" type="image_view" args="image:=/camera/color/image_raw" output="screen" />
  <!-- <node if="$(arg image_view)" name="airbot_play_gazebo_cam0_image_view" pkg="image_view" type="image_view" args="image:=/usb_cam_0/image_raw" output="screen" />
  <node if="$(arg image_view)" name="airbot_play_gazebo_cam1_image_view" pkg="image_view" type="image_view" args="image:=/usb_cam_1/image_raw" output="screen" /> -->
</launch>
